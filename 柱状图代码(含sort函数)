beam_data_input_windows_dis_FPGA2.sort()
beam_data_input_windows_dis_FPGA2_counter = Counter(beam_data_input_windows_dis_FPGA2)
beam_data_input_windows_dis_FPGA2_ele = set(beam_data_input_windows_dis_FPGA2)
beam_data_input_windows_dis_FPGA2_ele_0 = list(beam_data_input_windows_dis_FPGA2_ele)
beam_data_input_windows_dis_FPGA2_ele_0.sort()

print(beam_data_input_windows_dis_FPGA2_ele_0)

import numpy as np
import matplotlib
# from collections import Counter
# from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt
x = []
y = []
# x = [i for i in range(0,64)]
for i in range(0,64):
    if i in beam_data_input_windows_dis_FPGA2_ele_0:
        x.append(i - 31)
        y.append(beam_data_input_windows_dis_FPGA2_counter[i])
    else:
        x.append(i - 31)
        y.append(0)
        
figsize = 16,9
figure, ax = plt.subplots(figsize=figsize)
#设置字体
font0 = {'family' : 'Cabrili',
'weight' : 'normal',
'size'   : 22,
'color':'black'
}

font2 = {'family' : 'Calibri',
'weight' : 'bold',
'size'   : 40,
}
font3 = {'family' : 'Calibri',
'weight' : 'normal',
'size'   : 40,
} 


plt.xlabel(self_xlabel,horizontalalignment='right',x=1.0,fontdict=font0)
plt.ylabel(self_ylabel,horizontalalignment='left',y=0.85,fontdict=font0)

plt.ylim(0,1500)

# plt.tick_params(labelsize=36)

plt.xlim(-31.5,32.5)
plt.bar(x,y,align='center',color= 'mediumblue',alpha=1,width=0.8, linewidth=0.5 )


xmajorLocator = MultipleLocator(5)
ax.xaxis.set_major_locator(xmajorLocator)
ymajorLocator = MultipleLocator(500)  # 将y轴主刻度标签设置为0.05的倍数
ax.yaxis.set_major_locator(ymajorLocator)
xminorLocator = MultipleLocator(1)
ax.xaxis.set_minor_locator(xminorLocator)
yminorLocator = MultipleLocator(100)
ax.yaxis.set_minor_locator(yminorLocator)
ax.tick_params(which='major',direction='in',length=18,width=2.0,labelsize=24)
ax.tick_params(which='minor',direction='in',length=8,width=2.0)
plt.yticks(fontproperties='Cabrili', size=20,weight='normal')#设置大小及加粗
plt.xticks(fontproperties='Cabrili', size=20,weight='normal')#设置大小及加粗


plt.grid(ls='--') #显示网格线

font6 = {'family' : 'Calibri',
'weight' : 'bold',
'size'   : 36,
}

font7 = {'family' : 'Calibri',
'weight' : 'normal',
'size'   : 36,
"style":"italic"
} 


ax = plt.gca()

information9 = "Beam data distribution in input windows(FPGA2) "
plt.title(label=information9,loc="center",fontdict=font3,pad=50)
#图注1
information0="CMS MUON"
information2="Preliminary"
information3="GIF++"
ax.text(0.01,1.005,information0,font6,transform = ax.transAxes, )
#ax.text(0.225,1.005,information2,font7,transform = ax.transAxes, )
ax.text(0.85,1.005,information3,font6,transform = ax.transAxes, )

#图注2
font1 = {'family' : 'Calibri',
    'weight' : 'normal',
    'size'   : 26,
    "style":"italic"
    }
if label_num == 1:
    ax.text(0.55,0.65,file_name[7:13]+"_7100V"+"\n"+"Event count : "+"1000"+"\n"+"beam + cosmic"+"\n"
                +"beam trigger"+"\n",\
                font1,transform = ax.transAxes, )
else:
    ax.text(0.55,0.65,file_name[7:13]+"_7100V"+"\n"+"Event count : "+"1000"+"\n"+"beam + cosmic + gama"+"\n"+"γ bkg rate(WP) : " \
                    + file_name[:3] +" KHz/cm$^{2}$" +"\n"+"beam trigger"+"\n",\
                font1,transform = ax.transAxes, )
    



plt.savefig('./分析结果/Beam data distribution in input_windows/Beam data distribution in input_windows_FPGA2_%0.1f.png'%(float(file_name[:3])),dpi=100)
plt.show()
plt.close()
